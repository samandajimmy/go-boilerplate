// Code generated by MockGen. DO NOT EDIT.
// Source: go-boiler-plate/internal/app/domain/token (interfaces: ITokenRepository)

// Package mock is a generated GoMock package.
package mock

import (
	model "go-boiler-plate/internal/app/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockITokenRepository is a mock of ITokenRepository interface.
type MockITokenRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITokenRepositoryMockRecorder
}

// MockITokenRepositoryMockRecorder is the mock recorder for MockITokenRepository.
type MockITokenRepositoryMockRecorder struct {
	mock *MockITokenRepository
}

// NewMockITokenRepository creates a new mock instance.
func NewMockITokenRepository(ctrl *gomock.Controller) *MockITokenRepository {
	mock := &MockITokenRepository{ctrl: ctrl}
	mock.recorder = &MockITokenRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITokenRepository) EXPECT() *MockITokenRepositoryMockRecorder {
	return m.recorder
}

// RCreate mocks base method.
func (m *MockITokenRepository) RCreate(arg0 echo.Context, arg1 *model.AccountToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RCreate indicates an expected call of RCreate.
func (mr *MockITokenRepositoryMockRecorder) RCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RCreate", reflect.TypeOf((*MockITokenRepository)(nil).RCreate), arg0, arg1)
}

// RGetByUsername mocks base method.
func (m *MockITokenRepository) RGetByUsername(arg0 echo.Context, arg1 *model.AccountToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RGetByUsername", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RGetByUsername indicates an expected call of RGetByUsername.
func (mr *MockITokenRepositoryMockRecorder) RGetByUsername(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RGetByUsername", reflect.TypeOf((*MockITokenRepository)(nil).RGetByUsername), arg0, arg1)
}

// RUpdateAllAccountTokenExpiry mocks base method.
func (m *MockITokenRepository) RUpdateAllAccountTokenExpiry() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RUpdateAllAccountTokenExpiry")
	ret0, _ := ret[0].(error)
	return ret0
}

// RUpdateAllAccountTokenExpiry indicates an expected call of RUpdateAllAccountTokenExpiry.
func (mr *MockITokenRepositoryMockRecorder) RUpdateAllAccountTokenExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RUpdateAllAccountTokenExpiry", reflect.TypeOf((*MockITokenRepository)(nil).RUpdateAllAccountTokenExpiry))
}

// RUpdateToken mocks base method.
func (m *MockITokenRepository) RUpdateToken(arg0 echo.Context, arg1 *model.AccountToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RUpdateToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RUpdateToken indicates an expected call of RUpdateToken.
func (mr *MockITokenRepositoryMockRecorder) RUpdateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RUpdateToken", reflect.TypeOf((*MockITokenRepository)(nil).RUpdateToken), arg0, arg1)
}
