// Code generated by MockGen. DO NOT EDIT.
// Source: go-boiler-plate/internal/pkg/util (interfaces: IUtil)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIUtil is a mock of IUtil interface.
type MockIUtil struct {
	ctrl     *gomock.Controller
	recorder *MockIUtilMockRecorder
}

// MockIUtilMockRecorder is the mock recorder for MockIUtil.
type MockIUtilMockRecorder struct {
	mock *MockIUtil
}

// NewMockIUtil creates a new mock instance.
func NewMockIUtil(ctrl *gomock.Controller) *MockIUtil {
	mock := &MockIUtil{ctrl: ctrl}
	mock.recorder = &MockIUtilMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUtil) EXPECT() *MockIUtilMockRecorder {
	return m.recorder
}

// BcryptHashedPassword mocks base method.
func (m *MockIUtil) BcryptHashedPassword(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BcryptHashedPassword", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// BcryptHashedPassword indicates an expected call of BcryptHashedPassword.
func (mr *MockIUtilMockRecorder) BcryptHashedPassword(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BcryptHashedPassword", reflect.TypeOf((*MockIUtil)(nil).BcryptHashedPassword), arg0)
}
